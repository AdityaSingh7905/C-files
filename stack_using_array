#include <stdio.h>
#include <stdlib.h>
struct stack
{
    int size;
    int top;
    int *arr; //  integer pointer for requesting memory in the heap
};
int isempty(struct stack *s)
{
    if (s->top == -1)
        return 1;
    else
        return 0;
}
int isfull(struct stack *s)
{
    if (s->top == s->size - 1)
        return 1;
    else
        return 0;
}
void push(struct stack *s, int data)
{
    if (isfull(s))
        printf("\nStack Overflow!Can't push anything in the stack.");
    else
    {
        s->top++;
        s->arr[s->top] = data;
    }
}
int pop(struct stack *s)
{
    if (isempty(s))
        printf("\nStack is empty!Can't pop anything from the stack.");
    else
        return s->arr[s->top--];
}
void print_stack(struct stack s)
{
    for(int i=0;i<s.size;i++)
    {
        printf("\nElement is: %d",s.arr[i]);
    }
}
int main()
{
    struct stack s;
    s.size = 50;
    s.top = -1;
    s.arr = (int *)malloc(s.size * sizeof(int));
    push(&s,11);
    push(&s,12);
    push(&s,13);
    push(&s,14);
    push(&s,15);
    printf("\nStack elements are as follows:");
    print_stack(s);
    printf("\n%d is popped from the stack.",pop(&s));
    printf("\n%d is popped from the stack.",pop(&s));
    printf("\n%d is popped from the stack.",pop(&s));
    printf("\n%d is popped from the stack.",pop(&s));
    printf("\n%d is popped from the stack.",pop(&s));
    printf("\nStack elements are as follows:");
    print_stack(s);

}